Idee für Python Struktur:

def load_icon(icon_addr, display_addr):
    for i in range(8):
        load(icon_addr + i)
        store(display_addr + i)

Wir müssen nochmal schauen welche der load-Befehle wir wie nutzen können, um alle Icons zu laden.
Ich geh für den Code erstmal von einer 1-1 Variante aus, wo eine der 6 Bitzeilen, die das Icon bilden, ins Programm reinlädt 
Das macht dann am Ende die großen Laufzeiten der Schleifen aus
Für den oberen und unteren Rand wären es ja 30 Icons und pro Icon 6 Zeilen die geladen werden müssen --> 180 Schleifendurchläufe
Für die seitlichen Ränder sind es nur 18 Icons die geladen werden müssen, da ich jeweils eins aus dem oberen und unteren Rand schon abgearbeitet habe
18 Icons mit je 6 Bitadressen macht 108 Durchläufe der Schleifen für rechts und links

Wenn es aber gehen würde, mit dem load8 Befehl jeweils 1 Icon zu laden, würde ich die Schleifen noch einmal dazu anpassen
Da brauch ich aber ein passendes Beispiel/Testphase zu mit den jeweiligen Compiler, den uns die andere Gruppe ja hoffentlich noch geben wird

Zwecks den Reinladen der Texte für die Sieg/ Niederlagen Screens oder den Schlangenkopf werden wir wohl oder übel alles per Hand reinschreiben müssen
Bzw. wir können das doch irgendwie aus den Datein rausladen, da könnten wir vielleicht nochmal puky fragen

oberer Rand:
Erstes Icon beginnt bei Adresse 4097 und endet bei Adresse 4102
Nächstes Icon beginnt erst bei Adresse 4105, also eine Lücke (ZeichenLücke ZL von 2 Adressen (Adresse 4103 und 4104))

C-Schleife

Rand_Oben

for (i=0, j=4097, ZL=0; i<180 ;i++, j++ ZL++) //j ist die Adresse des Icons
{
if (ZL < 6) // immer in den ersten 6 Durchläufen (ZL von 0 bis 5) werden die Adressen rein geladen oder auf die Konsole gespeichert
{
lade(j,0x7e) // lade(Adresse im Register, Bitwert für "Farbe") um das ins Programm reinzubekommen
speicher(j,0x7e) // speicher(Adresse im Register, Bitwert für "Farbe") um auf Konsole das anzuzeigen
}
if (ZL > 5) // wenn ZL = 6 wird keine Adresse mehr geladen oder gespeichert, weil wir uns im Bereich der Lücke zwischen den Icons befinden
{
	j++;
	ZL = -1; //Hoffe mal man kann einen Int-Wert negativ initialisieren/ mit einer negativen Zahl überschreiben
}
}
//Hypothetische Adresswerte
i = 0 j = 4097 ZL = 0 Lade(4097) Speicher(4097)
i = 1 j = 4098 ZL = 1 Lade(4098) Speicher(4098)
i = 2 j = 4099 ZL = 2 Lade(4099) Speicher(4099)
i = 3 j = 4100 ZL = 3 Lade(4100) Speicher(4100)
i = 4 j = 4101 ZL = 4 Lade(4101) Speicher(4101)
i = 5 j = 4102 ZL = 5 Lade(4102) Speicher(4102)
i = 6 j = 4104 ZL = -1 Lade(-) Speicher(-)
i = 7 j = 4105 ZL = 0 Lade(4105) Speicher(4105)


unterer Rand von Schleifenstruktur gleich zu Rand oben
Rand_unten

for (i = 0, j = 8657, ZL = 0;i < 180; i++, j++, ZL++)
{
if (ZL < 6)
{
lade(j,0x7e)
speicher(j,0x7e)
}
if (ZL > 5)
{
	j++; // von 4103 (Adresse des 6ten Durchlaufs)  + 1 auf 4104 erhöhen, da mit 7ten Durchlauf der Schleife Adresse wieder richtig auf Adresse 4105 steht
	ZL = -1;
}
}

linker und Rechter Rand haben auch gleiche Struktur (18 Durchläufe pro Seite)
Rand_Links

for (i = 0, j = 4337, ZL = 0;i < 108; i++, j++, ZL++)
{
if (ZL < 6)
{
lade(j,0x7e)
speicher(j,0x7e)
}
if (ZL > 5)
{
	j = j + 233 //Sprung in nächste Zeile um das vordere Lücke des nächste linke Randicon zu treffen, nächster Schleifendurchlauf trifft das Icon
	ZL = -1;
}
}

i = 0 j = 4337 ZL = 0 Lade(4337) Speicher(4337)
i = 1 j = 4338 ZL = 1 Lade(4338) Speicher(4338)
i = 2 j = 4339 ZL = 2 Lade(4339) Speicher(4339)
i = 3 j = 4340 ZL = 3 Lade(4340) Speicher(4340)
i = 4 j = 4341 ZL = 4 Lade(4341) Speicher(4341)
i = 5 j = 4342 ZL = 5 Lade(4342) Speicher(4342)
i = 6 j = 4576 ZL = -1 Lade(-) Speicher(-)
i = 7 j = 4577 ZL = 0 Lade(4577) Speicher(4577)

Rand_Rechts

for (i = 0, j = 4569, ZL = 0;i < 108; i++, j++, ZL++)
{
if (ZL < 6)
{
lade(j,0x7e) 
speicher(j,0x7e)
}
if (ZL > 5)
{
	j = j + 233 //Sprung in nächste Zeile um das vordere Lücke des nächste linke Randicon zu treffen, nächster Schleifendurchlauf trifft das Icon
	ZL = -1;
}
}

SchlangenKopf zum Spielstart mit initialisieren

lade(6368,0x3c)
speicher(6368,0x3c)
lade(6369,0x42)
speicher(6369,0x42)
lade(6370,0x81)
speicher(6370,0x81)
lade(6371,0xa5)
speicher(6371,0xa5)
lade(6372,0xa5)
speicher(6372,0xa5)
lade(6373,0x81)
speicher(6373,0x81)
lade(6374,0x42)
speicher(6374,0x42)
lade(6375,0x3c)
speicher(6375,0x3c)
